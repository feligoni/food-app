{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\feli_\\\\OneDrive\\\\Escritorio\\\\React Course\\\\13-Better Food App\\\\src\\\\components\\\\Cart\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nimport classes from \"./Checkout.module.css\";\nimport Modal from \"../UI/Modal\";\nimport useInput from \"../../hooks/use-input\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isNotEmpty = value => value.trim() !== \"\";\n\nconst Checkout = props => {\n  _s();\n\n  let formIsValid = false;\n  const {\n    value: enteredName,\n    hasError: nameHasError,\n    reset: resetNameInput,\n    valueIsValid: nameIsValid,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredAddress,\n    hasError: addressHasError,\n    reset: resetAddressInput,\n    valueIsValid: addressIsValid,\n    valueChangeHandler: addressChangeHandler,\n    inputBlurHandler: addressBlurHandler\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredCity,\n    hasError: cityHasError,\n    reset: resetCityInput,\n    valueIsValid: cityIsValid,\n    valueChangeHandler: cityChangeHandler,\n    inputBlurHandler: cityBlurHandler\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredZip,\n    hasError: zipHasError,\n    reset: resetZipInput,\n    valueIsValid: zipIsValid,\n    valueChangeHandler: zipChangeHandler,\n    inputBlurHandler: zipBlurHandler\n  } = useInput(isNotEmpty);\n\n  if (nameIsValid && addressIsValid && zipIsValid && cityIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    props.onConfirm();\n\n    if (!nameIsValid || !addressIsValid || !zipIsValid || !cityIsValid) {\n      return;\n    }\n\n    resetAddressInput();\n    resetZipInput();\n    resetCityInput();\n    resetNameInput();\n  };\n\n  const nameInputClasses = !nameHasError ? \"control\" : \"invalid\";\n  const addressInputClasses = !addressHasError ? \"control\" : \"invalid\";\n  const cityInputClasses = !cityHasError ? \"control\" : \"invalid\";\n  const zipInputClasses = !zipHasError ? \"control\" : \"invalid\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), nameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"invalid label\",\n        children: \"Name is empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"address\",\n        children: \"Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"address\",\n        onChange: addressChangeHandler,\n        onBlur: addressBlurHandler,\n        value: enteredAddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), addressHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Address is empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        onChange: cityChangeHandler,\n        onBlur: cityBlurHandler,\n        value: enteredCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), cityHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"City is empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"zip\",\n        children: \"ZIP Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"zip\",\n        onChange: zipChangeHandler,\n        onBlur: zipBlurHandler,\n        value: enteredZip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), zipHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"ZIP Code is empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.onCancel,\n        type: \"button\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        disabled: !formIsValid,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"w+ckGrDmGbw/N6nvz/Y1U+q7jcU=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["C:/Users/feli_/OneDrive/Escritorio/React Course/13-Better Food App/src/components/Cart/Checkout.js"],"names":["classes","Modal","useInput","useState","isNotEmpty","value","trim","Checkout","props","formIsValid","enteredName","hasError","nameHasError","reset","resetNameInput","valueIsValid","nameIsValid","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","enteredAddress","addressHasError","resetAddressInput","addressIsValid","addressChangeHandler","addressBlurHandler","enteredCity","cityHasError","resetCityInput","cityIsValid","cityChangeHandler","cityBlurHandler","enteredZip","zipHasError","resetZipInput","zipIsValid","zipChangeHandler","zipBlurHandler","formSubmitHandler","event","preventDefault","onConfirm","nameInputClasses","addressInputClasses","cityInputClasses","zipInputClasses","form","control","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import classes from \"./Checkout.module.css\";\r\nimport Modal from \"../UI/Modal\";\r\nimport useInput from \"../../hooks/use-input\";\r\nimport { useState } from \"react\";\r\n\r\nconst isNotEmpty = (value) => value.trim() !== \"\";\r\nconst Checkout = (props) => {\r\n  let formIsValid = false;\r\n  const {\r\n    value: enteredName,\r\n    hasError: nameHasError,\r\n    reset: resetNameInput,\r\n    valueIsValid: nameIsValid,\r\n    valueChangeHandler: nameChangeHandler,\r\n    inputBlurHandler: nameBlurHandler,\r\n  } = useInput(isNotEmpty);\r\n  const {\r\n    value: enteredAddress,\r\n    hasError: addressHasError,\r\n    reset: resetAddressInput,\r\n    valueIsValid: addressIsValid,\r\n    valueChangeHandler: addressChangeHandler,\r\n    inputBlurHandler: addressBlurHandler,\r\n  } = useInput(isNotEmpty);\r\n  const {\r\n    value: enteredCity,\r\n    hasError: cityHasError,\r\n    reset: resetCityInput,\r\n    valueIsValid: cityIsValid,\r\n    valueChangeHandler: cityChangeHandler,\r\n    inputBlurHandler: cityBlurHandler,\r\n  } = useInput(isNotEmpty);\r\n  const {\r\n    value: enteredZip,\r\n    hasError: zipHasError,\r\n    reset: resetZipInput,\r\n    valueIsValid: zipIsValid,\r\n    valueChangeHandler: zipChangeHandler,\r\n    inputBlurHandler: zipBlurHandler,\r\n  } = useInput(isNotEmpty);\r\n\r\n  if (nameIsValid && addressIsValid && zipIsValid && cityIsValid) {\r\n    formIsValid = true;\r\n  }\r\n\r\n  const formSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    props.onConfirm();\r\n    if (!nameIsValid || !addressIsValid || !zipIsValid || !cityIsValid) {\r\n      return;\r\n    }\r\n    resetAddressInput();\r\n    resetZipInput();\r\n    resetCityInput();\r\n    resetNameInput();\r\n  };\r\n\r\n  const nameInputClasses = !nameHasError ? \"control\" : \"invalid\";\r\n  const addressInputClasses = !addressHasError ? \"control\" : \"invalid\";\r\n  const cityInputClasses = !cityHasError ? \"control\" : \"invalid\";\r\n  const zipInputClasses = !zipHasError ? \"control\" : \"invalid\";\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={formSubmitHandler}>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"name\">Name</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          onChange={nameChangeHandler}\r\n          onBlur={nameBlurHandler}\r\n          value={enteredName}\r\n        ></input>\r\n        {nameHasError && <p className=\"invalid label\">Name is empty.</p>}\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"address\">Address</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"address\"\r\n          onChange={addressChangeHandler}\r\n          onBlur={addressBlurHandler}\r\n          value={enteredAddress}\r\n        ></input>\r\n        {addressHasError && <p className=\"error-text\">Address is empty.</p>}\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"city\">City</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"city\"\r\n          onChange={cityChangeHandler}\r\n          onBlur={cityBlurHandler}\r\n          value={enteredCity}\r\n        ></input>\r\n        {cityHasError && <p className=\"error-text\">City is empty.</p>}\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"zip\">ZIP Code</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"zip\"\r\n          onChange={zipChangeHandler}\r\n          onBlur={zipBlurHandler}\r\n          value={enteredZip}\r\n        ></input>\r\n        {zipHasError && <p className=\"error-text\">ZIP Code is empty.</p>}\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button onClick={props.onCancel} type=\"button\">\r\n          Cancel\r\n        </button>\r\n        <button className={classes.submit} disabled={!formIsValid}>\r\n          Confirm\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n"]},"metadata":{},"sourceType":"module"}