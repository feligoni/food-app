{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useReducer } from \"react\";\nconst initialInputState = {\n  value: \"\",\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === \"INPUT\") {\n    return {\n      value: action.value,\n      isTouched: state.isTouched\n    };\n  }\n\n  if (action.type === \"BLUR\") {\n    return {\n      isTouched: true,\n      value: state.value\n    };\n  }\n\n  if (action.type === \"RESET\") {\n    return {\n      isTouched: false,\n      value: \"\"\n    };\n  }\n\n  return inputStateReducer;\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState); //   const [enteredValue, setEnteredValue] = useState(\"\");\n  //   const [isTouched, setIsTouched] = useState(false);\n  // const valueIsValid = validateValue(enteredValue);\n\n  const valueIsValid = validateValue(inputState.value); //const hasError = !valueIsValid && isTouched;\n\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = event => {\n    dispatch({\n      type: \"INPUT\",\n      value: event.target.value\n    }); //setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = () => {\n    dispatch({\n      type: \"BLUR\"\n    }); //setIsTouched(true);\n  };\n\n  const reset = () => {\n    dispatch({\n      type: \"RESET\"\n    }); // setEnteredValue(\"\");\n    // setIsTouched(false);\n  };\n\n  return {\n    //value: enteredValue,\n    value: inputState.value,\n    hasError,\n    valueIsValid,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"gvJkPEQ6Ju5turm8Oo71bK8W7Zk=\");\n\nexport default useInput;","map":{"version":3,"sources":["C:/Users/feli_/OneDrive/Escritorio/React Course/13-Better Food App/src/hooks/use-input.js"],"names":["useState","useReducer","initialInputState","value","isTouched","inputStateReducer","state","action","type","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AAEA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,EADiB;AAExBC,EAAAA,SAAS,EAAE;AAFa,CAA1B;;AAKA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,MAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AAAEL,MAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAhB;AAAuBC,MAAAA,SAAS,EAAEE,KAAK,CAACF;AAAxC,KAAP;AACD;;AACD,MAAIG,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,WAAO;AAAEJ,MAAAA,SAAS,EAAE,IAAb;AAAmBD,MAAAA,KAAK,EAAEG,KAAK,CAACH;AAAhC,KAAP;AACD;;AACD,MAAII,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AAAEJ,MAAAA,SAAS,EAAE,KAAb;AAAoBD,MAAAA,KAAK,EAAE;AAA3B,KAAP;AACD;;AACD,SAAOE,iBAAP;AACD,CAXD;;AAYA,MAAMI,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAClC,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBX,UAAU,CACvCI,iBADuC,EAEvCH,iBAFuC,CAAzC,CADkC,CAKlC;AACA;AAEA;;AACA,QAAMW,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACR,KAAZ,CAAlC,CATkC,CAUlC;;AACA,QAAMW,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACP,SAA7C;;AAEA,QAAMW,kBAAkB,GAAIC,KAAD,IAAW;AACpCJ,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,OAAR;AAAiBL,MAAAA,KAAK,EAAEa,KAAK,CAACC,MAAN,CAAad;AAArC,KAAD,CAAR,CADoC,CAEpC;AACD,GAHD;;AAKA,QAAMe,gBAAgB,GAAG,MAAM;AAC7BN,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR,CAD6B,CAE7B;AACD,GAHD;;AAKA,QAAMW,KAAK,GAAG,MAAM;AAClBP,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR,CADkB,CAElB;AACA;AACD,GAJD;;AAKA,SAAO;AACL;AACAL,IAAAA,KAAK,EAAEQ,UAAU,CAACR,KAFb;AAGLW,IAAAA,QAHK;AAILD,IAAAA,YAJK;AAKLE,IAAAA,kBALK;AAMLG,IAAAA,gBANK;AAOLC,IAAAA;AAPK,GAAP;AASD,CArCD;;GAAMV,Q;;AAuCN,eAAeA,QAAf","sourcesContent":["import { useState, useReducer } from \"react\";\r\n\r\nconst initialInputState = {\r\n  value: \"\",\r\n  isTouched: false,\r\n};\r\n\r\nconst inputStateReducer = (state, action) => {\r\n  if (action.type === \"INPUT\") {\r\n    return { value: action.value, isTouched: state.isTouched };\r\n  }\r\n  if (action.type === \"BLUR\") {\r\n    return { isTouched: true, value: state.value };\r\n  }\r\n  if (action.type === \"RESET\") {\r\n    return { isTouched: false, value: \"\" };\r\n  }\r\n  return inputStateReducer;\r\n};\r\nconst useInput = (validateValue) => {\r\n  const [inputState, dispatch] = useReducer(\r\n    inputStateReducer,\r\n    initialInputState\r\n  );\r\n  //   const [enteredValue, setEnteredValue] = useState(\"\");\r\n  //   const [isTouched, setIsTouched] = useState(false);\r\n\r\n  // const valueIsValid = validateValue(enteredValue);\r\n  const valueIsValid = validateValue(inputState.value);\r\n  //const hasError = !valueIsValid && isTouched;\r\n  const hasError = !valueIsValid && inputState.isTouched;\r\n\r\n  const valueChangeHandler = (event) => {\r\n    dispatch({ type: \"INPUT\", value: event.target.value });\r\n    //setEnteredValue(event.target.value);\r\n  };\r\n\r\n  const inputBlurHandler = () => {\r\n    dispatch({ type: \"BLUR\" });\r\n    //setIsTouched(true);\r\n  };\r\n\r\n  const reset = () => {\r\n    dispatch({ type: \"RESET\" });\r\n    // setEnteredValue(\"\");\r\n    // setIsTouched(false);\r\n  };\r\n  return {\r\n    //value: enteredValue,\r\n    value: inputState.value,\r\n    hasError,\r\n    valueIsValid,\r\n    valueChangeHandler,\r\n    inputBlurHandler,\r\n    reset,\r\n  };\r\n};\r\n\r\nexport default useInput;\r\n"]},"metadata":{},"sourceType":"module"}