{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useReducer } from \"react\";\nconst initialInputState = {\n  value: \"\",\n  isTouched: false\n}; // // const inputStateReducer = (state, action) => {\n//   if (action.type === \"INPUT\") {\n//     return { value: action.value, isTouched: state.isTouched };\n//   }\n//   if (action.type === \"BLUR\") {\n//     return { isTouched: true, value: state.value };\n//   }\n//   if (action.type === \"RESET\") {\n//     return { isTouched: false, value: \"\" };\n//   }\n//   return inputStateReducer;\n// };\n\nconst useInput = validateValue => {\n  _s();\n\n  // const [inputState, dispatch] = useReducer(\n  //   inputStateReducer,\n  //   initialInputState\n  // );\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue); //const valueIsValid = validateValue(inputState.value);\n  //const hasError = !valueIsValid && isTouched;\n\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = event => {\n    //dispatch({ type: \"INPUT\", value: event.target.value });\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = () => {\n    //dispatch({ type: \"BLUR\" });\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    //dispatch({ type: \"RESET\" });\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    //value: inputState.value,\n    hasError,\n    valueIsValid,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"qlnmfbTzj9Q0H+uTzI/AGYgwaf8=\");\n\nexport default useInput;","map":{"version":3,"sources":["C:/Users/feli_/OneDrive/Escritorio/React Course/13-Better Food App/src/hooks/use-input.js"],"names":["useState","useReducer","initialInputState","value","isTouched","useInput","validateValue","enteredValue","setEnteredValue","setIsTouched","valueIsValid","hasError","inputState","valueChangeHandler","event","target","inputBlurHandler","reset"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AAEA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,EADiB;AAExBC,EAAAA,SAAS,EAAE;AAFa,CAA1B,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAClC;AACA;AACA;AACA;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACI,SAAD,EAAYK,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMU,YAAY,GAAGJ,aAAa,CAACC,YAAD,CAAlC,CARkC,CASlC;AACA;;AACA,QAAMI,QAAQ,GAAG,CAACD,YAAD,IAAiBE,UAAU,CAACR,SAA7C;;AAEA,QAAMS,kBAAkB,GAAIC,KAAD,IAAW;AACpC;AACAN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaZ,KAAd,CAAf;AACD,GAHD;;AAKA,QAAMa,gBAAgB,GAAG,MAAM;AAC7B;AACAP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAHD;;AAKA,QAAMQ,KAAK,GAAG,MAAM;AAClB;AACAT,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAC,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAJD;;AAKA,SAAO;AACLN,IAAAA,KAAK,EAAEI,YADF;AAEL;AACAI,IAAAA,QAHK;AAILD,IAAAA,YAJK;AAKLG,IAAAA,kBALK;AAMLG,IAAAA,gBANK;AAOLC,IAAAA;AAPK,GAAP;AASD,CArCD;;GAAMZ,Q;;AAuCN,eAAeA,QAAf","sourcesContent":["import { useState, useReducer } from \"react\";\r\n\r\nconst initialInputState = {\r\n  value: \"\",\r\n  isTouched: false,\r\n};\r\n\r\n// // const inputStateReducer = (state, action) => {\r\n//   if (action.type === \"INPUT\") {\r\n//     return { value: action.value, isTouched: state.isTouched };\r\n//   }\r\n//   if (action.type === \"BLUR\") {\r\n//     return { isTouched: true, value: state.value };\r\n//   }\r\n//   if (action.type === \"RESET\") {\r\n//     return { isTouched: false, value: \"\" };\r\n//   }\r\n//   return inputStateReducer;\r\n// };\r\nconst useInput = (validateValue) => {\r\n  // const [inputState, dispatch] = useReducer(\r\n  //   inputStateReducer,\r\n  //   initialInputState\r\n  // );\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n\r\n  const valueIsValid = validateValue(enteredValue);\r\n  //const valueIsValid = validateValue(inputState.value);\r\n  //const hasError = !valueIsValid && isTouched;\r\n  const hasError = !valueIsValid && inputState.isTouched;\r\n\r\n  const valueChangeHandler = (event) => {\r\n    //dispatch({ type: \"INPUT\", value: event.target.value });\r\n    setEnteredValue(event.target.value);\r\n  };\r\n\r\n  const inputBlurHandler = () => {\r\n    //dispatch({ type: \"BLUR\" });\r\n    setIsTouched(true);\r\n  };\r\n\r\n  const reset = () => {\r\n    //dispatch({ type: \"RESET\" });\r\n    setEnteredValue(\"\");\r\n    setIsTouched(false);\r\n  };\r\n  return {\r\n    value: enteredValue,\r\n    //value: inputState.value,\r\n    hasError,\r\n    valueIsValid,\r\n    valueChangeHandler,\r\n    inputBlurHandler,\r\n    reset,\r\n  };\r\n};\r\n\r\nexport default useInput;\r\n"]},"metadata":{},"sourceType":"module"}